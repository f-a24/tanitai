{"version":3,"sources":["constants/Firebase.ts","hooks/useCachedResources.ts","screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","components/LoginForm.tsx","App.tsx","hooks/useSettingFirebaseConfig.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","useCachedResources","React","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","Ionicons","font","require","console","warn","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","marginBottom","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","width","height","resizeMode","marginLeft","marginHorizontal","marginVertical","codeHighlightText","borderRadius","paddingHorizontal","TabOneScreen","separator","wrap","firebase","auth","signOut","buttonStyle","textStyle","alignSelf","paddingBottom","borderWidth","borderColor","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","size","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","LoadSpinner","loading","onButtonPress","ActivityIndicator","inputStyle","paddingRight","paddingLeft","LoginForm","email","password","error","state","setState","onLoginSuccess","onLoginFail","TextInput","placeholder","autoCorrect","value","onChangeText","secureTextEntry","signInWithEmailAndPassword","then","log","catch","createUserWithEmailAndPassword","App","loggedIn","setLogged","apps","length","initializeApp","firebaseConfig","onAuthStateChanged","user","useSettingFirebaseConfig","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.98330912.chunk.js","sourcesContent":["export default {\n  apiKey: 'AIzaSyCS1DP6rRRYizIQs_R3hNTO0pwxZ-ddYW4',\n  authDomain: 'tanitai.firebaseapp.com',\n  databaseURL: 'https://tanitai.firebaseio.com',\n  projectId: 'tanitai',\n  storageBucket: 'tanitai.appspot.com',\n  messagingSenderId: '850588988233',\n  appId: '1:850588988233:web:2ba3d3c4ff438b540ca098',\n};\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nconst useCachedResources = () => {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n};\n\nexport default useCachedResources;\n","import * as React from 'react';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { RootStackParamList } from '../types';\n\nconst NotFoundScreen: React.FC<StackScreenProps<\n  RootStackParamList,\n  'NotFound'\n>> = ({ navigation }) => (\n  <View style={styles.container}>\n    <Text style={styles.title}>This screen doesn't exist.</Text>\n    <TouchableOpacity\n      onPress={() => navigation.replace('Root')}\n      style={styles.link}\n    >\n      <Text style={styles.linkText}>Go to home screen!</Text>\n    </TouchableOpacity>\n  </View>\n);\n\nexport default NotFoundScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  }\n  return Colors[theme][colorName];\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor(\n    { light: lightColor, dark: darkColor },\n    'background'\n  );\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nconst MonoText: React.FC<TextProps> = (props) => (\n  <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />\n);\n\nexport default MonoText;\n","import * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport MonoText from './StyledText';\nimport { Text, View } from './Themed';\n\nconst EditScreenInfo: React.FC<{ path: string }> = ({ path }) => (\n  <View>\n    <View style={styles.getStartedContainer}>\n      <Text\n        style={styles.getStartedText}\n        lightColor=\"rgba(0,0,0,0.8)\"\n        darkColor=\"rgba(255,255,255,0.8)\"\n      >\n        Open up the code for this screen:\n      </Text>\n\n      <View\n        style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n        darkColor=\"rgba(255,255,255,0.05)\"\n        lightColor=\"rgba(0,0,0,0.05)\"\n      >\n        <MonoText>{path}</MonoText>\n      </View>\n\n      <Text\n        style={styles.getStartedText}\n        lightColor=\"rgba(0,0,0,0.8)\"\n        darkColor=\"rgba(255,255,255,0.8)\"\n      >\n        Change any of the text, save the file, and your app will automatically\n        update.\n      </Text>\n    </View>\n\n    <View style={styles.helpContainer}>\n      <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n        <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n          Tap here if your app doesn't automatically update after making changes\n        </Text>\n      </TouchableOpacity>\n    </View>\n  </View>\n);\n\nexport default EditScreenInfo;\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nconst TabOneScreen: React.FC = () => (\n  <View style={styles.container}>\n    <Text style={styles.title}>Tab One</Text>\n    <View\n      style={styles.separator}\n      lightColor=\"#eee\"\n      darkColor=\"rgba(255,255,255,0.1)\"\n    />\n    <EditScreenInfo path=\"/screens/TabOneScreen.js\" />\n    <View style={styles.wrap}>\n      <TouchableOpacity\n        onPress={() => firebase.auth().signOut()}\n        style={styles.buttonStyle}\n      >\n        <Text style={styles.textStyle}>ログアウト</Text>\n      </TouchableOpacity>\n    </View>\n  </View>\n);\n\nexport default TabOneScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  wrap: {\n    padding: 10,\n  },\n  textStyle: {\n    alignSelf: 'center',\n    color: '#007aff',\n    fontSize: 16,\n    fontWeight: '600',\n    paddingBottom: 10,\n    paddingTop: 10,\n  },\n  buttonStyle: {\n    alignSelf: 'stretch',\n    backgroundColor: '#fff',\n    borderRadius: 5,\n    borderWidth: 1,\n    borderColor: '#007aff',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nconst TabTwoScreen: React.FC = () => (\n  <View style={styles.container}>\n    <Text style={styles.title}>Tab Two</Text>\n    <View\n      style={styles.separator}\n      lightColor=\"#eee\"\n      darkColor=\"rgba(255,255,255,0.1)\"\n    />\n    <EditScreenInfo path=\"/screens/TabTwoScreen.js\" />\n  </View>\n);\n\nexport default TabTwoScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}\n    >\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n      <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => (\n            <TabBarIcon name=\"ios-code\" color={color} />\n          ),\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: string; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Tab One Title' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import {\n  NavigationContainer,\n  DefaultTheme,\n  DarkTheme,\n} from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({\n  colorScheme,\n}: {\n  colorScheme: ColorSchemeName;\n}) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}\n    >\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen\n        name=\"NotFound\"\n        component={NotFoundScreen}\n        options={{ title: 'Oops!' }}\n      />\n    </Stack.Navigator>\n  );\n}\n","import * as React from 'react';\nimport {\n  View,\n  TouchableOpacity,\n  Text,\n  TextInput,\n  ActivityIndicator,\n  GestureResponderEvent,\n  StyleSheet,\n} from 'react-native';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst LoadSpinner: React.FC<{\n  loading: boolean;\n  onButtonPress: (e: GestureResponderEvent) => void;\n}> = ({ loading, onButtonPress }) => {\n  if (loading) return <ActivityIndicator size=\"small\" />;\n  return (\n    <TouchableOpacity onPress={onButtonPress} style={styles.buttonStyle}>\n      <Text style={styles.textStyle}>新規登録 or ログイン</Text>\n    </TouchableOpacity>\n  );\n};\n\nconst LoginForm: React.FC = () => {\n  const [state, setState] = React.useState({\n    email: '',\n    password: '',\n    error: '',\n    loading: false,\n  });\n\n  const onLoginSuccess = () => {\n    setState({\n      email: '',\n      password: '',\n      loading: false,\n      error: '',\n    });\n  };\n\n  const onLoginFail = () => {\n    setState({\n      ...state,\n      loading: false,\n      error: 'Authentication Failed',\n    });\n  };\n\n  const onButtonPress = () => {\n    const { email, password } = state;\n    setState({ ...state, error: '', loading: true });\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(() => {\n        console.log('---THEN---');\n      })\n      .catch(() => {\n        console.log('---CATCH---');\n        firebase\n          .auth()\n          .createUserWithEmailAndPassword(email, password)\n          .then(onLoginSuccess)\n          .catch(onLoginFail);\n      });\n  };\n  return (\n    <View>\n      <View style={styles.wrap}>\n        <TextInput\n          placeholder=\"user@gmail.com\"\n          autoCorrect={false}\n          value={state.email}\n          onChangeText={(email) => setState({ ...state, email })}\n        />\n      </View>\n      <View style={styles.wrap}>\n        <TextInput\n          secureTextEntry\n          placeholder=\"password\"\n          autoCorrect={false}\n          value={state.password}\n          onChangeText={(password) => setState({ ...state, password })}\n        />\n      </View>\n\n      <View style={styles.wrap}>\n        <LoadSpinner loading={state.loading} onButtonPress={onButtonPress} />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  wrap: {\n    padding: 10,\n  },\n  textStyle: {\n    alignSelf: 'center',\n    color: '#007aff',\n    fontSize: 16,\n    fontWeight: '600',\n    paddingBottom: 10,\n    paddingTop: 10,\n  },\n  buttonStyle: {\n    alignSelf: 'stretch',\n    backgroundColor: '#fff',\n    borderRadius: 5,\n    borderWidth: 1,\n    borderColor: '#007aff',\n  },\n  inputStyle: {\n    color: '#000',\n    paddingRight: 5,\n    paddingLeft: 5,\n    fontSize: 18,\n    lineHeight: 23,\n    height: 30,\n    borderWidth: 1,\n    borderColor: '#333',\n  },\n});\n\nexport default LoginForm;\n","import * as React from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useSettingFirebaseConfig from './hooks/useSettingFirebaseConfig';\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport LoginForm from './components/LoginForm';\n\nconst App: React.FC = () => {\n  const loggedIn = useSettingFirebaseConfig();\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) return null;\n  if (!loggedIn) return <LoginForm />;\n  return (\n    <SafeAreaProvider>\n      <Navigation colorScheme={colorScheme} />\n      <StatusBar />\n    </SafeAreaProvider>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport firebase from 'firebase/app';\nimport firebaseConfig from '../constants/Firebase';\n\nexport default () => {\n  const [loggedIn, setLogged] = React.useState(false);\n  React.useEffect(() => {\n    if (!firebase.apps.length) firebase.initializeApp(firebaseConfig);\n\n    firebase.auth().onAuthStateChanged((user) => {\n      setLogged(!!user);\n    });\n  }, []);\n\n  return loggedIn;\n};\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}